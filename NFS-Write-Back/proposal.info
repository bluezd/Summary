current nfs/fscache only support * write-through * caching based on fscache/cachefiles (two kernel modules) 

IDEA: so the goal is making NFS support * write-back * cache. Modify the nfs/fscache/cachefiles

The type of Cache
    --Write Through
        当写数据进Cache时，也同时更新了相应的Memory里的内容
    --Write back
	只是写到Cache里，Memory 的内容要等到 cache 保存的要被别的数据替换或者系统做cache flush时，才会被更新。


With wider adoption of SSD on nfs client side, it would be great for nfs to support writeback cache to speed up write intensive clients.
flashcache/bcache only works for local filesystems. 

B-cache: which is a Linux kernel module intended to improve the performance of block devices. Instead of using just memory to cache hard drives, he proposes to use one or more solid-state storage devices (SSDs) to cache block data (hence bcache, a block device cache). 

// When data is read from the hard drive, a copy is saved to the SSD. Later, when one of those sectors needs to be retrieved again, the kernel checks to see if it's still in page cache(RAM). If so, the read comes from RAM just like it always has on Linux. If it's not in RAM but it is on the SSD, it's read from there. It's like we've added 64GB or more of - slower - RAM to the system and devoted it to caching.

Note that this type of caching is only for block devices (anything that shows up as a block device in /dev/). It isn't for network filesystems like NFS, CIFS, and so on

/* fscache 的出现就是为了实现和 bcache 类似的功能 */



FS-Cache mediates between cache backends (such as CacheFS) and network
filesystems:
       
        +---------+
        |         |                        +--------------+
        |   NFS   |--+                     |              |
        |         |  |                 +-->|   CacheFS    |
        +---------+  |   +----------+  |   |  /dev/hda5   |
                     |   |          |  |   +--------------+
        +---------+  +-->|          |  |
        |         |      |          |--+
        |   AFS   |----->| FS-Cache |
        |         |      |          |--+
        +---------+  +-->|          |  |
                     |   |          |  |   +--------------+
        +---------+  |   +----------+  |   |              |
        |         |  |                 +-->|  CacheFiles  |
        |  ISOFS  |--+                     |  /var/cache  |
        |         |                        +--------------+
        +---------+

          netfs           fscache              backend

Fs-Cache has two set of APIs
 1. front-end --> nfs use it
 2. back-end  --> the implementation of write through method of FS-cache
                                        write back

FS-Cache 是指在文件系统和缓存之间的接口。
CacheFS 指的则是FS-cache的缓存后端
        -> CacheFS做实际的数据存储和检索处理，并使用块设备的分区。

# mount -o fsc server:/export /mnt/export





------------------------------------------------------ 8< -----------------------------------------------------------------------------------------------------
The netfs and FS-Cache talk to each other by means of cookies. These are elements of the virtual indexing tree that FS-Cache maintains,but they appear as opaque pointers to the netfs.
They are of type:
struct fscache_cookie *

fs_initcall(fscache_init);    // 5
syslog:
FS-Cache: Loaded

/*
 * initialise the fs caching module
 */
static int __init fscache_init(void)
{
        int ret;

        ret = slow_work_register_user(THIS_MODULE);
        if (ret < 0)
                goto error_slow_work;

        ret = fscache_proc_init();
        if (ret < 0)
                goto error_proc;

        fscache_cookie_jar = kmem_cache_create("fscache_cookie_jar",
                                               sizeof(struct fscache_cookie),
                                               0,
                                               0,
                                               fscache_cookie_init_once);
	// 创建一个高速缓存描述符 slab
	
        if (!fscache_cookie_jar) {
                printk(KERN_NOTICE
                       "FS-Cache: Failed to allocate a cookie jar\n");
                ret = -ENOMEM;
                goto error_cookie_jar;
        }
        
        fscache_root = kobject_create_and_add("fscache", kernel_kobj);
        if (!fscache_root)
                goto error_kobj;

        printk(KERN_NOTICE "FS-Cache: Loaded\n");
        return 0;

error_kobj:
        kmem_cache_destroy(fscache_cookie_jar);
error_cookie_jar:
        fscache_proc_cleanup();
error_proc:
        slow_work_unregister_user(THIS_MODULE);
error_slow_work:
        return ret;
}


A netfs receives a cookie from FS-Cache when it registers. This cookie represents the primary index of this netfs. A netfs can acquire fur-ther cookies by asking FS-Cache to perform a lookup in an object represented by a cookie it already has.


module_init(init_nfs_fs)      // 6

/*
 * Initialize NFS
 */
static int __init init_nfs_fs(void)
{
        int err;

        err = nfs_idmap_init();
        if (err < 0)
                goto out9;

        err = nfs_dns_resolver_init();
        if (err < 0)
                goto out8;

        err = nfs_fscache_register();
        if (err < 0)
                goto out7;
        // fscache register

        err = nfsiod_start();
        if (err)
                goto out6;

        err = nfs_fs_proc_init();
        if (err)
                goto out5;

        err = nfs_init_nfspagecache();
        if (err)
                goto out4;

        err = nfs_init_inodecache();
        if (err)
                goto out3;

        err = nfs_init_readpagecache();
        if (err)
                goto out2;

        err = nfs_init_writepagecache();
        if (err)
                goto out1;

        err = nfs_init_directcache();
        if (err)
                goto out0;

#ifdef CONFIG_PROC_FS
        rpc_proc_register(&nfs_rpcstat);
#endif
        if ((err = register_nfs_fs()) != 0)
                goto out;
        return 0;
out:
#ifdef CONFIG_PROC_FS
        rpc_proc_unregister("nfs");
#endif
        nfs_destroy_directcache();
out0:
        nfs_destroy_writepagecache();
out1:
        nfs_destroy_readpagecache();
out2:
        nfs_destroy_inodecache();
out3:
        nfs_destroy_nfspagecache();
out4:
        nfs_fs_proc_exit();
out5:
        nfsiod_stop();
out6:
        nfs_fscache_unregister();
out7:
        nfs_dns_resolver_destroy();
out8:
        nfs_idmap_quit();
out9:
        return err;
}

/*
 * Register NFS for caching
 */
int nfs_fscache_register(void)
{
        return fscache_register_netfs(&nfs_fscache_netfs);
}


/*
 * fscache cached network filesystem type
 * - name, version and ops must be filled in before registration
 * - all other fields will be set during registration
 */
struct fscache_netfs {
        uint32_t                        version;        /* indexing version */
        const char                      *name;          /* filesystem name */
        struct fscache_cookie           *primary_index;
        struct list_head                link;           /* internal link */
};


 +------------------------------------------------------------------------------------------+
 |      /*                                                                                  |
 |       * Define the NFS filesystem for FS-Cache.  Upon registration FS-Cache sticks       |
 |       * the cookie for the top-level index object for NFS into here.  The top-level      |
 |       * index can than have other cache objects inserted into it.                        |
 |       */                                                                                 |
 |      struct fscache_netfs nfs_fscache_netfs = {                                          |
 |      	.name           = "nfs",                                                    |
 |      	.version        = 0,                                                        |
 |      };                                                                                  |
 +------------------------------------------------------------------------------------------+

/**
 * fscache_register_netfs - Register a filesystem as desiring caching services
 * @netfs: The description of the filesystem
 *
 * Register a filesystem as desiring caching services if they're available.
 *
 * See Documentation/filesystems/caching/netfs-api.txt for a complete
 * description.
 */
static inline
int fscache_register_netfs(struct fscache_netfs *netfs)
{
        if (fscache_available())
                return __fscache_register_netfs(netfs);
        else
                return 0;
}
#if defined(CONFIG_FSCACHE) || defined(CONFIG_FSCACHE_MODULE)
#define fscache_available() (1)
#endif

/*
 * register a network filesystem for caching
 */
int __fscache_register_netfs(struct fscache_netfs *netfs)
{
        struct fscache_netfs *ptr;
        int ret;

        _enter("{%s}", netfs->name);

        INIT_LIST_HEAD(&netfs->link);

        /* allocate a cookie for the primary index */
        netfs->primary_index =
                kmem_cache_zalloc(fscache_cookie_jar, GFP_KERNEL);
        // 从 fscache_cookie_jar 高速缓存描述符中分配一个 struct fscache_cookie 结构  
        // The netfs and FS-Cache talk to each other by means of cookies These are elements of the virtual indexing tree that FS-Cache maintains
	// specifying the layout of the primary index


        if (!netfs->primary_index) {
                _leave(" = -ENOMEM");
                return -ENOMEM;
        }

        /* initialise the primary index cookie */
        atomic_set(&netfs->primary_index->usage, 1);
        atomic_set(&netfs->primary_index->n_children, 0);

        netfs->primary_index->def               = &fscache_fsdef_netfs_def;
        netfs->primary_index->parent            = &fscache_fsdef_index;
        netfs->primary_index->netfs_data        = netfs;

        atomic_inc(&netfs->primary_index->parent->usage);
        atomic_inc(&netfs->primary_index->parent->n_children);

        spin_lock_init(&netfs->primary_index->lock);
        INIT_HLIST_HEAD(&netfs->primary_index->backing_objects);

        /* check the netfs type is not already present */
        down_write(&fscache_addremove_sem);

        ret = -EEXIST;
        list_for_each_entry(ptr, &fscache_netfs_list, link) {
                if (strcmp(ptr->name, netfs->name) == 0)
                        goto already_registered;
        }

        list_add(&netfs->link, &fscache_netfs_list);
        ret = 0;

        printk(KERN_NOTICE "FS-Cache: Netfs '%s' registered for caching\n",
               netfs->name);

already_registered:
        up_write(&fscache_addremove_sem);

        if (ret < 0) {
                netfs->primary_index->parent = NULL;
                __fscache_cookie_put(netfs->primary_index);
                netfs->primary_index = NULL;
        }

        _leave(" = %d", ret);
        return ret;
}

backend-api: This API is declared in <linux/fscache-cache.h>
front-api:                           <linux/fscache.h>
